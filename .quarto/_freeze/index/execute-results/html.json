{
  "hash": "06ac90b4f27d0c69fb46c1cc3ef9f693",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Environnements reproductibles pour la science des données avec {rix}\"\nauthor: \"Bruno Rodrigues\"\nformat:\n  revealjs:\n    embed-resources: true\n    slide-number: true\n    theme: solarized\n    incremental: true\n  pptx:\n    freeze: true\nexecute:\n  echo: true\n---\n\n## Intro : Qui suis-je\n\nBruno Rodrigues, responsable du département de statistique au Ministère de la\nRecherche et de l’Enseignement supérieur au Luxembourg\n\n## Intro : Qui suis-je\n\n![](images/luxembourg.png){fig-align=\"center\"}\n\n## Intro : Qui suis-je\n\nDiapositives disponibles en ligne :\n\n[https://b-rodrigues.github.io/repro_rrr](https://b-rodrigues.github.io/repro_rrr)\n\nCode disponible ici :\n\n[https://github.com/b-rodrigues/repro_rrr](https://github.com/b-rodrigues/repro_rrr)\n\n## Ce dont je vais parler\n\n- Identifier *ce* qui doit être maîtrisé pour garantir la reproductibilité\n  (capacité à retrouver *exactement* les mêmes résultats à partir d’une analyse)\n- Présenter brièvement Nix, `{rix}` et `{rixpress}`\n\n## Solutions disponibles pour R (1/2)\n\n- `{renv}` ou `{groundhog}`: simple à utiliser, mais:\n  - Ne sauvegarde pas la version de R\n  - L’installation d’anciens packages peut échouer (dépendances système)\n\n- Docker permet d’aller plus loin :\n  - Gère R *et* les dépendances système\n  - Utilise des images immuables et partageables\n  - Conteneurs exécutables n'importe ou\n\n## Solutions disponibles pour R (2/2)\n\n- Limites de Docker :\n  - Courbe d’apprentissage (connaissances Linux recommandées)\n  - N'est pas conçu à l'origine pour la reproductibilité\n  - À voir : [Rocker](https://rocker-project.org/images/versioned/r-ver.html)\n\n## Le gestionnaire de paquets Nix (1/2)\n\nGestionnaire de paquets : outil permettant d’installer et de gérer des *paquets*\n\nPaquet : tout logiciel (pas uniquement les packages R)\n\nUn gestionnaire de paquets populaire :\n\n. . .\n\n![Google Play Store](images/play_store.png)\n\n## Le gestionnaire de paquets Nix (2/2)\n\n- Pour garantir la reproductibilité : R, les packages R et autres dépendances\n  doivent être gérés explicitement\n- Nix est un gestionnaire de paquets réellement centré sur les builds\n  reproductibles\n- Nix gère tout à l’aide d’un seul fichier texte (appelé une expression Nix) !\n- Ces expressions produisent *toujours* exactement le même résultat\n\n## rix : environnements de développement reproductibles avec Nix (1/5)\n\n- `{rix}` ([site web](https://docs.ropensci.org/rix/)) simplifie l’écriture\n  d’expressions Nix !\n- Il suffit d’utiliser la fonction `rix()` fournie :\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rix)\n\nrix(date = \"2025-06-02\",\n    r_pkgs = c(\"dplyr\", \"ggplot2\"),\n    system_pkgs = NULL,\n    git_pkgs = NULL,\n    tex_pkgs = NULL,\n    ide = \"code\",\n    project_path = \".\")\n```\n:::\n\n\n## rix : environnements de développement reproductibles avec Nix (2/5)\n\n- Les fichiers `renv.lock` peuvent aussi servir de point de départ :\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rix)\n\nrenv2nix(\n  renv_lock_path = \"path/to/original/renv_project/renv.lock\",\n  project_path = \"path/to/rix_project\",\n  override_r_ver = \"4.4.1\" # <- optionnel\n)\n```\n:::\n\n\n## rix : environnements de développement reproductibles avec Nix (3/5)\n\n- Lister la version de R et les packages nécessaires\n- En option :\n    * packages système, packages depuis GitHub, ou packages LaTeX\n    * un IDE (Rstudio, Radian, VS Code ou \"autre\")\n    * une version de Python et paquets Python à inclure\n    * une version de Julia et paquets Julia à inclure\n\n## rix : environnements de développement reproductibles avec Nix (4/5)\n\n- `rix::rix()` génère un fichier `default.nix`\n- Construire les expressions avec `nix-build` (en terminal) ou\n  `rix::nix_build()` depuis R\n- Accéder à l’environnement de développement avec `nix-shell`\n- Les expressions peuvent être générées même sans Nix installé (avec quelques\n  limitations)\n\n## rix : environnements de développement reproductibles avec Nix (5/5)\n\n- Peut installer des versions spécifiques de packages (écrire `\"dplyr@1.0.0\"`)\n- Peut installer des packages hébergés sur Github\n- De nombreuses vignettes pour démarrer ! [Voir ici](https://docs.ropensci.org/rix/articles/)\n\n## Démonstration\n\n- Base: `scripts/nix_expressions/rix_intro/`\n- Nix et `{targets}`: `scripts/nix_expressions/nix_targets_pipeline`\n- GitHub Actions: [voir ici](https://github.com/b-rodrigues/rix_paper/tree/master)\n- Nix et Docker: `scripts/nix_expressions/docker/`\n\n## Pipelines polyglottes avec `{rixpress}`\n\n- `{rixpress}` permet d'enchaîner des étapes de traitement en R **et** Python\n- Utilise `{rix}` pour créer un environnement reproductible (via Nix)\n  d’exécution de la pipeline\n- Chaque étape de pipeline est une **dérivation Nix**\n- Transfert de données : automatique via `reticulate` ou format universel (JSON)\n\n## Un exemple de pipeline mixte\n\n```r\nlist(\n  rxp_py_file(…),    # Lire un CSV avec Python\n  rxp_py(…),         # Filtrer avec Polars\n  rxp_py2r(…),       # Transfert Python → R\n  rxp_r(…),          # Transformation en R\n  rxp_r2py(…),       # Transfert R → Python\n  rxp_py(…),         # Autre étape Python\n  rxp_py2r(…),       # Retour vers R\n  rxp_r(…)           # Étape finale\n) |> rixpress()\n```\n\n- Chaque étape est nommée, typée (`py`, `r`, `r2py`, etc.)\n- Possibilité d’ajouter des fichiers (`functions.R`, images…)\n\n## Transfert avec JSON (ou autre format universel)\n\n- Avantage : évite d’utiliser `reticulate`\n- Ajouter une fonction de sérialisation Python :\n\n. . .\n\n```python\ndef serialize_to_json(pl_df, path):\n    with open(path, 'w') as f:\n        f.write(pl_df.write_json())\n```\n\n- Et côté R :\n\n. . .\n\n```r\nrxp_r(\n  name = \"x\",\n  expr = my_fun(data),\n  unserialize_function = \"jsonlite::fromJSON\"\n)\n```\n\n## Génération de documents (Quarto ou Rmd)\n\n- Intégration facile de la sortie du pipeline dans un `.qmd` :\n\n. . .\n\n````qmd\n```r\nrixpress::rxp_read(\"mtcars_head\")\n```\n````\n\n. . .\n\n- Tous les objets créés peuvent être chargés dynamiquement dans le document\n- Possibilité de transmettre des fichiers supplémentaires (`content.qmd`, images…)\n\n## Pour en savoir plus:\n\n- [Repository GitHub](https://github.com/b-rodrigues/rixpress)\n- [Site web](https://b-rodrigues.github.io/rixpress/)\n- [Repository d’exemples](https://github.com/b-rodrigues/rixpress_demos)\n\n## Fin\n\nContactez-moi si vous avez des questions :\n\n- bruno@brodrigues.co\n- Twitter : [@brodriguesco](https://x.com/brodriguesco)\n- Mastodon : [@brodriguesco@fosstodon.org](https://fosstodon.org/@brodriguesco)\n- Blog : [www.brodrigues.co](https://brodrigues.co/)\n- Livre : [www.raps-with-r.dev](https://raps-with-r.dev/)\n- rix : [https://docs.ropensci.org/rix](https://docs.ropensci.org/rix)\n- rixpress : [https://b-rodrigues.github.io/rixpress/](https://b-rodrigues.github.io/rixpress/)\n\n. . .\n\nMerci !\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}