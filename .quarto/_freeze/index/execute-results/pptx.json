{
  "hash": "197614ce91a9b967df3bbe5cf01c5ea6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Environnements reproductibles pour la science des données avec {rix}\"\nauthor: \"Bruno Rodrigues\"\nformat:\n  revealjs:\n    embed-resources: true\n    slide-number: true\n    theme: solarized\n    incremental: true\n  pptx:\n    freeze: true\nexecute:\n  echo: true\n---\n\n## Intro : Qui suis-je\n\nBruno Rodrigues, responsable du département de statistique au Ministère de la\nRecherche et de l’Enseignement supérieur au Luxembourg\n\n## Intro : Qui suis-je\n\n![](images/luxembourg.png){fig-align=\"center\"}\n\n## Intro : Qui suis-je\n\nDiapositives disponibles en ligne :\n[https://b-rodrigues.github.io/repro_rrr](https://b-rodrigues.github.io/repro_rrr)\n\nCode disponible ici : [https://github.com/b-rodrigues/repro_rrr](https://github.com/b-rodrigues/repro_rrr)\n\n## Ce dont je vais parler\n\n- Identifier *ce* qui doit être maîtrisé pour garantir la reproductibilité \n  (capacité à retrouver *exactement* les mêmes résultats à partir d’une analyse)\n- Présenter brièvement Nix, `{rix}` et `{rixpress}`\n\n## Solutions disponibles pour R (1/2)\n\n- `{renv}` ou `{groundhog}`: simple à utiliser, mais:\n  - Ne sauvegarde pas la version de R  \n  - L’installation d’anciens packages peut échouer (dépendances système)  \n\n- Docker permet d’aller plus loin :  \n  - Gère R *et* les dépendances système  \n  - Utilise des images immuables et partageables  \n  - Conteneurs exécutables n'importe ou\n\n## Solutions disponibles pour R (2/2)\n\n- Limites de Docker :  \n  - Courbe d’apprentissage (connaissances Linux recommandées)  \n  - N'est pas conçu à l'origine pour la reproductibilité  \n  - À voir : [Rocker](https://rocker-project.org/images/versioned/r-ver.html)\n\n## Le gestionnaire de paquets Nix (1/2)\n\nGestionnaire de paquets : outil permettant d’installer et de gérer des *paquets*\n\nPaquet : tout logiciel (pas uniquement les packages R)\n\nUn gestionnaire de paquets populaire :\n\n. . .\n\n![Google Play Store](images/play_store.png)\n\n## Le gestionnaire de paquets Nix (2/2)\n\n- Pour garantir la reproductibilité : R, les packages R et autres dépendances\n  doivent être gérés explicitement\n- Nix est un gestionnaire de paquets réellement centré sur les builds\n  reproductibles\n- Nix gère tout à l’aide d’un seul fichier texte (appelé une expression Nix) !\n- Ces expressions produisent *toujours* exactement le même résultat\n\n## rix : environnements de développement reproductibles avec Nix (1/5)\n\n- `{rix}` ([site web](https://docs.ropensci.org/rix/)) simplifie l’écriture\n  d’expressions Nix !\n- Il suffit d’utiliser la fonction `rix()` fournie :\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rix)\n\nrix(date = \"2025-06-02\",\n    r_pkgs = c(\"dplyr\", \"ggplot2\"),\n    system_pkgs = NULL,\n    git_pkgs = NULL,\n    tex_pkgs = NULL,\n    ide = \"code\",\n    project_path = \".\")\n```\n:::\n\n\n## rix : environnements de développement reproductibles avec Nix (2/5)\n\n- Les fichiers `renv.lock` peuvent aussi servir de point de départ :\n\n```\nlibrary(rix)\n\nrenv2nix(\n  renv_lock_path = \"path/to/original/renv_project/renv.lock\",\n  project_path = \"path/to/rix_project\",\n  override_r_ver = \"4.4.1\" # <- optionnel\n)\n```\n\n## rix : environnements de développement reproductibles avec Nix (3/5)\n\n- Lister la version de R et les packages nécessaires\n- En option : packages système, packages depuis Github, ou packages LaTeX\n- En option : un IDE (Rstudio, Radian, VS Code ou \"autre\")\n- En option: une version de Python et paquets Python à inclure\n- En dev: une version de Julia et paquets Julia à inclure\n- Travailler de manière interactive dans un environnement isolé, spécifique au\n  projet et reproductible !\n\n## rix : environnements de développement reproductibles avec Nix (4/5)\n\n- `rix::rix()` génère un fichier `default.nix`\n- Construire les expressions avec `nix-build` (en terminal) ou\n  `rix::nix_build()` depuis R\n- Accéder à l’environnement de développement avec `nix-shell`\n- Les expressions peuvent être générées même sans Nix installé (avec quelques\n  limitations)\n\n## rix : environnements de développement reproductibles avec Nix (5/5)\n\n- Peut installer des versions spécifiques de packages (écrire `\"dplyr@1.0.0\"`)\n- Peut installer des packages hébergés sur Github\n- De nombreux exemples pour démarrer ! [Voir\n  ici](https://docs.ropensci.org/rix/articles/)\n\n## Démonstration\n\n- Base: `scripts/nix_expressions/rix_intro/`\n- Nix et `{targets}`: `scripts/nix_expressions/nix_targets_pipeline`\n- GitHub Actions: [voir ici](https://github.com/b-rodrigues/rix_paper/tree/master)\n\n## Fin\n\nContactez-moi si vous avez des questions :\n\n- bruno@brodrigues.co\n- Twitter : @brodriguesco\n- Mastodon : @brodriguesco@fosstodon.org\n- Blog : www.brodrigues.co\n- Livre : www.raps-with-r.dev\n- rix : https://docs.ropensci.org/rix\n\n. . .\n\nMerci !\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}