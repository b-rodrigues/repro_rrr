{
  "hash": "866ff4be8a08efcb99d3c6208c662af4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Environnements reproductibles pour la science des données avec {rix}\"\nauthor: \"Bruno Rodrigues\"\nformat:\n  revealjs:\n    embed-resources: true\n    slide-number: true\n    theme: solarized\n    incremental: true\n  pptx:\n    freeze: true\nexecute:\n  echo: true\n---\n\n## Intro : Qui suis-je\n\nBruno Rodrigues, responsable du département de statistique au Ministère de la\nRecherche et de l’Enseignement supérieur au Luxembourg\n\n## Intro : Qui suis-je\n\n![](images/luxembourg.png){fig-align=\"center\"}\n\n## Intro : Qui suis-je\n\nDiapositives disponibles en ligne :\n[https://b-rodrigues.github.io/repro_univ_eiffel](https://b-rodrigues.github.io/repro_univ_eiffel)\n\nCode disponible ici : [https://github.com/b-rodrigues/repro_univ_eiffel](https://github.com/b-rodrigues/repro_univ_eiffel)\n\n## Ce dont je vais parler\n\n- Identifier *ce* qui doit être maîtrisé pour garantir la reproductibilité\n- Présenter brièvement {rix} et Nix\n\n## Ce que j’entends par *reproductibilité*\n\n- Capacité à retrouver *exactement* les mêmes résultats à partir d’une analyse\n\n## Rendre notre analyse reproductible\n\nNous devons répondre à ces questions\n\n. . .\n\n1. Est-ce facile pour une autre personne de relancer l’analyse ?\n2. Est-ce facile de mettre à jour le projet ?\n3. Est-ce facile de réutiliser ce code dans un autre projet ?\n4. Quelles garanties avons-nous que le résultat reste stable dans le temps ?\n\n## La reproductibilité est un continuum (1/2)\n\nVoici les 4 principaux facteurs qui influencent la reproductibilité d’une\nanalyse :\n\n- Version de R utilisée\n- Versions des packages utilisés\n- Système d’exploitation\n- Matériel\n\n## La reproductibilité est un continuum (2/2)\n\n![](images/repro_spectrum.png){fig-align=\"center\"}\n\nSource : Peng, Roger D. 2011. \"Reproducible Research in Computational Science.\"\nScience 334 (6060): 1226--27\n\n## Enregistrer les packages avec {renv} 1/2\n\nLe package le plus populaire pour la reproductibilité, et très simple\nd’utilisation :\n\n- Ouvrir une session R dans le dossier contenant les scripts\n- Exécuter `renv::init()` et vérifier la présence du fichier `renv.lock`\n\n## Enregistrer les packages avec {renv} 2/2\n\n- Mais :\n\n1. Enregistre mais ne restaure pas la version de R\n2. L’installation de vieux packages peut échouer (à cause de dépendances système\n   manquantes)\n\n## Aller plus loin avec Docker : gérer R et les dépendances système\n\n- Docker est un outil de conteneurisation à installer sur votre ordinateur\n- Docker permet de créer des *images* et d’exécuter des *conteneurs* (un\n  conteneur est une instance d’une image)\n- Les images Docker :\n    1. contiennent tous les logiciels et le code nécessaires à votre projet\n    2. sont immuables (ne peuvent pas être modifiées à l’exécution)\n    3. peuvent être partagées en ligne ou hors ligne\n\n## Docker : une panacée ?\n\n- Docker est très utile et largement utilisé\n- Mais le coût d’entrée est élevé (une certaine familiarité avec Linux est\n  recommandée)\n- Point de défaillance unique (que se passe-t-il si Docker est racheté,\n  abandonné, etc. ? **peu probable néanmoins**)\n- Ne traite pas directement de la reproductibilité, on \"détourne\" son usage\n- Au fait, jetez un œil au projet\n  [Rocker](https://rocker-project.org/images/versioned/r-ver.html)\n\n## Le gestionnaire de paquets Nix (1/2)\n\nGestionnaire de paquets : outil permettant d’installer et de gérer des *paquets*\n\nPaquet : tout logiciel (pas uniquement les packages R)\n\nUn gestionnaire de paquets populaire :\n\n. . .\n\n![Google Play Store](images/play_store.png)\n\n## Le gestionnaire de paquets Nix (2/2)\n\n- Pour garantir la reproductibilité : R, les packages R et autres dépendances\n  doivent être gérés explicitement\n- Nix est un gestionnaire de paquets réellement centré sur les builds\n  reproductibles\n- Nix gère tout à l’aide d’un seul fichier texte (appelé une expression Nix) !\n- Ces expressions produisent *toujours* exactement le même résultat\n\n## rix : environnements de développement reproductibles avec Nix (1/5)\n\n- `{rix}` ([site web](https://docs.ropensci.org/rix/)) simplifie l’écriture\n  d’expressions Nix !\n- Il suffit d’utiliser la fonction `rix()` fournie :\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rix)\n\nrix(date = \"2025-01-27\",\n    r_pkgs = c(\"dplyr\", \"ggplot2\"),\n    system_pkgs = NULL,\n    git_pkgs = NULL,\n    tex_pkgs = NULL,\n    ide = \"code\",\n    project_path = \".\")\n```\n:::\n\n\n## rix : environnements de développement reproductibles avec Nix (2/5)\n\n- Les fichiers `renv.lock` peuvent aussi servir de point de départ :\n\n. . .\n\n```\nlibrary(rix)\n\nrenv2nix(\n  renv_lock_path = \"path/to/original/renv_project/renv.lock\",\n  project_path = \"path/to/rix_project\",\n  override_r_ver = \"4.4.1\" # <- optionnel\n)\n```\n\n## rix : environnements de développement reproductibles avec Nix (3/5)\n\n- Lister la version de R et les packages nécessaires\n- En option : packages système, packages depuis Github, ou packages LaTeX\n- En option : un IDE (Rstudio, Radian, VS Code ou \"autre\")\n- Travailler de manière interactive dans un environnement isolé, spécifique au\n  projet et reproductible !\n\n## rix : environnements de développement reproductibles avec Nix (4/5)\n\n- `rix::rix()` génère un fichier `default.nix`\n- Construire les expressions avec `nix-build` (en terminal) ou\n  `rix::nix_build()` depuis R\n- Accéder à l’environnement de développement avec `nix-shell`\n- Les expressions peuvent être générées même sans Nix installé (avec quelques\n  limitations)\n\n## rix : environnements de développement reproductibles avec Nix (5/5)\n\n- Peut installer des versions spécifiques de packages (écrire `\"dplyr@1.0.0\"`)\n- Peut installer des packages hébergés sur Github\n- De nombreux exemples pour démarrer ! [Voir\n  ici](https://docs.ropensci.org/rix/articles/)\n\n. . .\n\nJetons un œil à `scripts/nix_expressions/rix_intro/`\n\n## Utilisation non interactive\n\n- `{rix}` facilite l’exécution de pipelines dans le bon environnement\n- Petite remarque : le meilleur outil pour construire des pipelines en R est\n  `{targets}` (et peut-être bientôt\n  [rixpress](https://b-rodrigues.github.io/rixpress/)\n- Voir `scripts/nix_expressions/nix_targets_pipeline`\n- Il est aussi possible d’exécuter le pipeline comme ceci :\n\n. . .\n\n```\ncd /chemin/absolu/vers/le/pipeline/ && nix-shell default.nix --run \"Rscript -e 'targets::tar_make()'\"\n```\n\n## Nix et Github Actions : exécuter des pipelines\n\n- Il est facile d’exécuter un pipeline `{targets}` sur Github Actions\n- Il suffit de lancer `rix::tar_nix_ga()` pour générer les fichiers nécessaires\n- Committez, poussez, et regardez les actions s’exécuter !\n- Voir [ici](https://github.com/b-rodrigues/nix_targets_pipeline/tree/master)\n\n## Nix et Github Actions : écrire des articles\n\n- La collaboration sur des articles devient facile également\n- Voir [ici](https://github.com/b-rodrigues/rix_paper/tree/master)\n- Concentrez-vous juste sur l’écriture !\n\n## Conclusion\n\n- Sujet vaste et complexe !\n- À minima, générez un fichier `renv.lock`\n- Il est toujours possible de reconstruire une image Docker plus tard (vous, ou\n  quelqu’un d’autre !)\n- Pensez à utiliser `{targets}` : excellent pour la reproductibilité, et outil\n  formidable en général\n- Pour une reproductibilité à long terme : Docker ou Nix (mieux : les deux !),\n  avec un effort de maintenance nécessaire\n\n## Fin\n\nContactez-moi si vous avez des questions :\n\n- bruno@brodrigues.co\n- Twitter : @brodriguesco\n- Mastodon : @brodriguesco@fosstodon.org\n- Blog : www.brodrigues.co\n- Livre : www.raps-with-r.dev\n- rix : https://docs.ropensci.org/rix\n\n. . .\n\nMerci !\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}